{"ast":null,"code":"import { FETCH_PRODUCTS, FILTER_PRODUCTS_BY_SIZE, ORDER_PRODUCTS_BY_PRICE } from \"../types\";\nexport const fetchProducts = () => async dispatch => {\n  const res = await fetch(\"/api/products\"); // the data comes from Fitch method need to be converted to JSON\n  // below ... the JSON file return Promose, make it await\n\n  const data = await res.json();\n  console.log(data);\n  dispatch({\n    type: FETCH_PRODUCTS,\n    payload: data\n  });\n}; //takes two params 1. all products 2.the sizes we need to filter\n\nexport const filteredProducts = (products, size) => dispatch => {\n  dispatch({\n    type: FILTER_PRODUCTS_BY_SIZE,\n    // gonna send an object and it contains two value. 1. the selected size and filtered products\n    payload: {\n      size: size,\n      items: size === \"\" ? products : products.filter(x => x.availableSizes.indexOf(size) >= 0)\n    }\n  });\n};\nexport const sortProducts = (filteredProducts, sort) => dispatch => {\n  const sortedProducts = filteredProducts.slice(); // \"\" means sorted by _id\n\n  if (sort === \"\") {\n    sortedProducts.sort((a, b) => a._id > b._id ? 1 : -1); // sorted by price\n  } else {\n    sortedProducts.sort((a, b) => sort === \"lowestprice\" ? //lowest to highest\n    a.price > b.price ? 1 : -1 : //highest to lowest\n    a.price > b.price ? -1 : 1);\n  }\n\n  dispatch({\n    type: ORDER_PRODUCTS_BY_PRICE,\n    payload: {\n      sort: sort,\n      items: sortedProducts\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ronanmak/Documents/react-shopping-cart/src/actions/productActions.js"],"names":["FETCH_PRODUCTS","FILTER_PRODUCTS_BY_SIZE","ORDER_PRODUCTS_BY_PRICE","fetchProducts","dispatch","res","fetch","data","json","console","log","type","payload","filteredProducts","products","size","items","filter","x","availableSizes","indexOf","sortProducts","sort","sortedProducts","slice","a","b","_id","price"],"mappings":"AAAA,SACEA,cADF,EAEEC,uBAFF,EAGEC,uBAHF,QAIO,UAJP;AAMA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,eAAD,CAAvB,CADqD,CAErD;AACA;;AACA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAH,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEX,cADC;AAEPY,IAAAA,OAAO,EAAEL;AAFF,GAAD,CAAR;AAID,CAVM,C,CAYP;;AACA,OAAO,MAAMM,gBAAgB,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAqBX,QAAD,IAAc;AAChEA,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEV,uBADC;AAEP;AACAW,IAAAA,OAAO,EAAE;AACPG,MAAAA,IAAI,EAAEA,IADC;AAEPC,MAAAA,KAAK,EACHD,IAAI,KAAK,EAAT,GACID,QADJ,GAEIA,QAAQ,CAACG,MAAT,CAAiBC,CAAD,IAAOA,CAAC,CAACC,cAAF,CAAiBC,OAAjB,CAAyBL,IAAzB,KAAkC,CAAzD;AALC;AAHF,GAAD,CAAR;AAWD,CAZM;AAcP,OAAO,MAAMM,YAAY,GAAG,CAACR,gBAAD,EAAmBS,IAAnB,KAA6BlB,QAAD,IAAc;AACpE,QAAMmB,cAAc,GAAGV,gBAAgB,CAACW,KAAjB,EAAvB,CADoE,CAEpE;;AACA,MAAIF,IAAI,KAAK,EAAb,EAAiB;AACfC,IAAAA,cAAc,CAACD,IAAf,CAAoB,CAACG,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,GAAF,GAAQD,CAAC,CAACC,GAAV,GAAgB,CAAhB,GAAoB,CAAC,CAApD,EADe,CAEf;AACD,GAHD,MAGO;AACLJ,IAAAA,cAAc,CAACD,IAAf,CAAoB,CAACG,CAAD,EAAIC,CAAJ,KAClBJ,IAAI,KAAK,aAAT,GACI;AACAG,IAAAA,CAAC,CAACG,KAAF,GAAUF,CAAC,CAACE,KAAZ,GACE,CADF,GAEE,CAAC,CAJP,GAKI;AACFH,IAAAA,CAAC,CAACG,KAAF,GAAUF,CAAC,CAACE,KAAZ,GACE,CAAC,CADH,GAEE,CATN;AAWD;;AACDxB,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAET,uBADC;AAEPU,IAAAA,OAAO,EAAE;AACPU,MAAAA,IAAI,EAAEA,IADC;AAEPN,MAAAA,KAAK,EAAEO;AAFA;AAFF,GAAD,CAAR;AAOD,CA1BM","sourcesContent":["import {\n  FETCH_PRODUCTS,\n  FILTER_PRODUCTS_BY_SIZE,\n  ORDER_PRODUCTS_BY_PRICE,\n} from \"../types\";\n\nexport const fetchProducts = () => async (dispatch) => {\n  const res = await fetch(\"/api/products\");\n  // the data comes from Fitch method need to be converted to JSON\n  // below ... the JSON file return Promose, make it await\n  const data = await res.json();\n  console.log(data);\n  dispatch({\n    type: FETCH_PRODUCTS,\n    payload: data,\n  });\n};\n\n//takes two params 1. all products 2.the sizes we need to filter\nexport const filteredProducts = (products, size) => (dispatch) => {\n  dispatch({\n    type: FILTER_PRODUCTS_BY_SIZE,\n    // gonna send an object and it contains two value. 1. the selected size and filtered products\n    payload: {\n      size: size,\n      items:\n        size === \"\"\n          ? products\n          : products.filter((x) => x.availableSizes.indexOf(size) >= 0),\n    },\n  });\n};\n\nexport const sortProducts = (filteredProducts, sort) => (dispatch) => {\n  const sortedProducts = filteredProducts.slice();\n  // \"\" means sorted by _id\n  if (sort === \"\") {\n    sortedProducts.sort((a, b) => (a._id > b._id ? 1 : -1));\n    // sorted by price\n  } else {\n    sortedProducts.sort((a, b) =>\n      sort === \"lowestprice\"\n        ? //lowest to highest\n          a.price > b.price\n          ? 1\n          : -1\n        : //highest to lowest\n        a.price > b.price\n        ? -1\n        : 1\n    );\n  }\n  dispatch({\n    type: ORDER_PRODUCTS_BY_PRICE,\n    payload: {\n      sort: sort,\n      items: sortedProducts,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}